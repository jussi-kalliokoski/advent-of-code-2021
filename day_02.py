EXAMPLE_INPUT = """
forward 5
down 5
forward 8
up 3
down 8
forward 2
"""

PUZZLE_INPUT = """
forward 8
down 9
up 1
forward 2
down 6
forward 6
down 5
down 4
down 2
forward 3
forward 8
down 6
up 3
up 3
down 5
up 8
forward 8
up 6
forward 4
down 8
up 2
up 6
forward 7
up 6
down 6
down 1
forward 8
up 7
forward 9
forward 5
forward 8
forward 5
down 3
forward 5
up 1
forward 6
forward 3
forward 3
down 2
forward 4
down 3
forward 6
forward 2
forward 1
down 2
forward 1
down 1
up 8
down 4
forward 3
up 3
down 5
down 2
forward 7
forward 1
down 9
up 1
down 1
forward 2
forward 1
forward 1
forward 7
up 5
forward 2
down 6
down 7
down 3
down 1
forward 4
forward 5
down 3
forward 4
down 5
forward 3
forward 4
forward 2
up 8
down 7
up 3
forward 2
down 5
forward 9
forward 5
up 1
down 5
down 6
forward 2
forward 5
down 6
down 1
up 8
up 9
down 7
down 5
forward 2
forward 7
forward 7
up 6
down 4
up 6
forward 2
down 4
down 3
down 4
forward 2
down 2
down 1
down 4
up 4
forward 7
forward 6
forward 2
forward 5
forward 1
forward 7
forward 2
down 3
forward 7
forward 2
up 4
up 5
down 1
down 2
down 3
down 7
up 8
forward 4
down 5
down 4
forward 3
down 6
forward 5
up 5
forward 6
down 1
down 7
forward 1
forward 6
up 9
forward 2
down 1
forward 5
forward 2
forward 6
forward 8
forward 6
down 8
forward 3
down 9
up 8
forward 9
down 7
down 6
down 1
up 5
down 6
forward 7
up 9
forward 8
forward 3
forward 3
forward 2
down 6
up 1
up 5
forward 7
down 2
down 5
down 1
down 4
forward 8
forward 2
forward 8
up 5
forward 7
up 7
forward 6
forward 9
up 1
down 4
forward 8
forward 4
down 9
up 6
down 8
up 9
down 2
down 2
down 9
up 3
down 7
down 2
up 9
forward 9
down 5
forward 2
forward 1
forward 2
down 4
forward 4
down 2
forward 8
up 3
forward 6
up 7
up 9
forward 4
up 9
down 5
forward 5
up 6
down 2
down 4
forward 1
down 2
forward 3
down 7
down 1
down 5
forward 5
up 5
forward 3
down 5
forward 7
down 3
down 2
up 9
down 4
forward 4
down 4
forward 1
up 9
down 8
forward 2
down 7
forward 8
down 5
up 2
down 9
down 2
up 4
up 2
forward 8
forward 3
forward 4
down 1
down 3
forward 3
down 8
forward 7
down 7
forward 5
forward 5
up 3
down 6
forward 1
down 4
forward 2
down 4
up 2
down 3
forward 4
forward 6
up 7
down 3
forward 7
forward 1
down 1
up 3
down 7
up 3
up 8
up 7
up 7
forward 7
down 2
forward 6
forward 7
up 3
down 3
up 9
down 6
down 7
down 7
up 5
forward 6
forward 2
up 9
forward 2
down 3
down 3
forward 5
forward 3
forward 6
forward 6
down 7
forward 2
down 3
up 4
forward 1
forward 5
down 5
up 1
down 9
forward 3
up 6
forward 5
down 4
forward 9
up 5
forward 7
up 7
forward 9
forward 2
forward 6
forward 3
forward 3
up 7
down 1
down 1
forward 1
down 8
down 2
forward 4
up 7
forward 7
down 5
down 7
up 6
down 4
forward 4
forward 4
up 7
down 9
forward 6
forward 1
down 7
forward 5
forward 2
forward 1
up 7
down 9
forward 2
down 7
up 8
forward 1
forward 4
up 4
forward 1
down 9
down 5
down 8
forward 8
forward 8
down 8
down 3
down 5
down 6
up 9
forward 1
down 1
forward 1
forward 1
down 6
forward 3
down 1
forward 9
forward 3
up 7
down 9
forward 5
down 4
up 9
down 2
down 5
down 6
forward 1
up 2
forward 9
up 7
forward 2
forward 8
down 5
down 6
down 8
forward 4
down 4
forward 9
forward 3
forward 6
forward 9
up 2
down 8
up 2
up 6
up 5
down 5
down 7
forward 1
up 6
forward 9
up 4
forward 4
up 2
forward 3
down 8
down 1
up 5
forward 5
down 3
down 4
down 1
forward 3
up 2
forward 3
down 1
forward 8
up 3
forward 4
down 3
forward 6
down 9
down 7
forward 3
forward 5
forward 1
forward 3
up 8
forward 2
forward 2
forward 7
up 9
forward 4
down 1
down 6
forward 8
forward 5
up 4
up 5
up 9
forward 9
up 8
down 3
up 5
forward 1
forward 5
up 9
forward 8
forward 4
forward 3
forward 1
forward 6
down 2
up 8
down 7
down 1
down 5
up 1
forward 9
down 2
down 4
forward 3
forward 1
down 7
up 9
up 7
down 2
down 4
down 1
forward 9
up 4
down 9
down 9
down 4
down 9
forward 1
down 2
forward 8
up 4
up 3
forward 4
down 5
forward 8
forward 2
forward 4
up 3
up 2
up 3
forward 4
forward 4
forward 6
down 7
down 8
up 3
down 9
down 5
up 7
up 1
down 3
down 4
up 5
up 9
down 2
up 8
forward 9
down 3
forward 4
down 5
down 1
forward 9
forward 2
up 3
down 9
down 8
up 7
forward 2
down 9
up 8
up 2
down 3
forward 3
forward 3
forward 3
forward 4
down 7
up 2
forward 3
forward 7
forward 5
forward 7
down 6
down 9
down 6
down 8
up 4
down 4
down 2
up 1
down 3
forward 7
forward 5
down 7
forward 1
up 7
forward 9
down 8
down 1
down 3
down 1
up 8
forward 7
up 5
forward 6
down 1
down 8
up 1
up 9
forward 7
down 9
forward 3
forward 8
forward 7
down 3
down 5
up 3
up 7
up 3
up 6
up 8
down 3
forward 7
down 7
forward 9
up 9
down 1
down 3
down 8
down 6
forward 1
up 6
down 1
up 4
down 2
forward 9
up 8
up 2
down 6
down 1
forward 2
forward 6
forward 1
forward 2
up 6
down 7
down 8
forward 9
up 2
down 6
down 8
down 5
up 6
forward 6
down 5
forward 4
forward 2
down 1
down 4
up 5
down 5
down 1
down 9
down 1
down 1
forward 1
forward 5
up 4
down 5
down 3
down 2
down 7
forward 5
forward 6
forward 2
up 9
up 3
forward 6
down 4
forward 8
forward 4
forward 9
down 6
down 9
down 1
forward 6
down 8
down 7
forward 5
down 4
forward 5
forward 5
up 3
down 1
down 4
forward 1
forward 7
down 5
down 4
forward 7
forward 3
forward 4
down 4
forward 8
up 2
up 6
down 9
up 1
down 8
up 2
up 6
forward 5
forward 7
up 4
down 4
down 8
forward 5
up 4
down 6
forward 9
up 4
forward 7
up 7
down 3
down 2
down 2
down 6
down 4
forward 4
down 3
down 4
down 4
down 8
up 2
down 3
forward 5
forward 5
up 5
forward 1
down 7
forward 5
forward 7
forward 9
forward 4
down 1
down 1
up 5
down 6
down 8
down 9
down 9
forward 7
down 6
forward 3
down 7
up 3
forward 5
forward 5
up 6
down 5
down 8
down 5
down 1
down 7
forward 8
up 9
forward 2
up 1
down 9
down 2
forward 7
up 1
down 5
forward 3
up 6
forward 9
up 9
down 3
forward 2
up 6
down 6
up 8
down 3
up 5
forward 9
up 3
forward 4
forward 6
down 3
forward 4
down 5
down 7
down 7
forward 9
forward 6
down 9
up 1
forward 2
down 8
down 7
up 7
forward 6
up 5
down 6
forward 6
down 3
forward 2
down 7
forward 2
down 3
down 8
forward 4
up 8
forward 7
down 4
forward 3
down 3
forward 6
down 7
down 7
forward 8
forward 9
down 8
down 4
forward 5
down 1
forward 9
down 7
up 3
down 6
down 4
down 9
forward 3
down 1
forward 1
down 5
forward 1
forward 9
down 9
forward 5
down 1
up 9
down 3
down 2
up 6
forward 4
down 6
down 2
forward 5
up 8
down 7
up 6
down 1
forward 3
forward 4
down 9
down 2
forward 5
forward 8
up 2
forward 9
up 5
down 1
forward 1
forward 6
forward 9
forward 2
down 8
forward 1
up 8
forward 1
forward 8
up 5
forward 3
down 4
up 8
down 6
up 1
forward 2
forward 4
up 6
forward 1
forward 4
up 6
down 8
up 7
forward 5
up 7
down 9
down 2
up 5
forward 2
down 7
forward 1
forward 1
forward 3
down 6
forward 7
up 2
up 1
forward 1
up 5
down 1
forward 7
up 9
forward 7
down 6
up 4
down 5
up 2
down 4
up 3
down 6
down 7
down 7
up 1
forward 4
forward 1
up 2
down 7
down 5
forward 7
forward 5
forward 2
down 4
down 6
down 8
forward 9
forward 8
up 9
forward 6
down 6
down 6
down 8
up 5
forward 6
down 6
forward 5
down 4
down 6
down 2
up 3
forward 1
forward 8
down 2
forward 9
forward 7
forward 8
forward 1
down 8
forward 1
down 1
forward 6
forward 4
forward 5
up 9
up 1
down 7
up 8
down 5
down 2
forward 9
up 2
forward 6
down 7
down 7
down 2
down 6
down 7
forward 9
up 2
down 6
forward 8
forward 1
down 3
down 2
forward 3
forward 7
down 3
down 1
down 4
down 9
forward 1
down 6
down 8
down 4
down 5
down 5
up 9
forward 7
down 9
up 3
up 5
up 1
forward 2
forward 9
down 3
forward 1
up 3
forward 6
up 2
forward 7
forward 5
forward 8
forward 7
forward 8
down 5
up 3
forward 5
forward 8
forward 1
forward 5
forward 7
forward 2
down 6
down 6
down 6
down 2
down 2
up 1
down 1
forward 5
forward 7
down 4
forward 4
up 1
forward 7
forward 8
down 5
down 2
down 2
down 5
forward 3
forward 7
down 5
forward 2
forward 8
down 3
forward 6
up 1
forward 7
forward 4
forward 1
forward 9
forward 2
down 1
down 1
down 8
forward 4
down 6
forward 7
forward 2
"""

import tensorflow as tf

def __parse(text: tf.Tensor) -> tf.Tensor:
    def parse_line(line_str):
        direction_and_step_strs = tf.strings.split(line_str, " ")
        steps = tf.strings.to_number(direction_and_step_strs[1], out_type=tf.int32)
        forward = tf.concat([steps, 0], 0)
        up = tf.concat([0, -steps], 0)
        down = tf.concat([0, steps], 0)
        direction = direction_and_step_strs[0]
        result = tf.cond(
            tf.equal(direction, "forward"),
            lambda: forward,
            lambda: down,
        )
        result = tf.cond(
            tf.equal(direction, "up"),
            lambda: up,
            lambda: result,
        )
        return result

    return tf.map_fn(
        lambda line_str: parse_line(line_str),
        tf.strings.split(tf.strings.strip(text), "\n"),
        dtype=tf.int32,
    )

assert tf.reduce_all(__parse(EXAMPLE_INPUT) == tf.constant([
  [5, 0],   # forward 5
  [0, 5],   # down 5
  [8, 0],   # forward 8
  [0, -3],  # up 3
  [0, 8],   # down 8
  [2, 0],   # forward 2
]))

def __get_position_product(moves: tf.Tensor) -> tf.Tensor:
    return tf.math.reduce_prod(tf.math.reduce_sum(moves, 0))

def __get_position_product_with_aim(moves: tf.Tensor) -> tf.Tensor:
    indices = tf.range(0, tf.shape(moves)[0])
    pos = tf.map_fn(
        lambda idx: tf.reduce_sum(moves[:idx+1, 0:1], 0),
        indices,
    )
    aim = tf.map_fn(
        lambda idx: tf.reduce_sum(moves[:idx+1, 1:2], 0),
        indices,
    )
    depth_delta = aim * moves[:, 0:1]
    depth = tf.map_fn(
        lambda idx: tf.reduce_sum(depth_delta[:idx+1], 0),
        indices,
    )
    prod = pos[-1] * depth[-1]
    return prod[0]

assert __get_position_product(__parse(EXAMPLE_INPUT)) == tf.constant(150)
assert __get_position_product_with_aim(__parse(EXAMPLE_INPUT)) == tf.constant(900)

assert __get_position_product(__parse(PUZZLE_INPUT)) == tf.constant(1488669)
print("Day 1:", __get_position_product(__parse(PUZZLE_INPUT)).numpy())
assert __get_position_product_with_aim(__parse(PUZZLE_INPUT)) == tf.constant(1176514794)
print("Day 2:", __get_position_product_with_aim(__parse(PUZZLE_INPUT)).numpy())
